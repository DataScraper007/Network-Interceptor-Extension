var o = Object.defineProperty; var a = (s, e, t) => e in s ? o(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t; var n = (s, e, t) => (a(s, typeof e != "symbol" ? e + "" : e, t), t); const r = "https://www.google-analytics.com/mp/collect", c = "G-5GFXEF0V7J", l = "qhzMexqPRxil5t_NBySsZA"; class _ { constructor(e = !1) { n(this, "debug"); this.debug = e } async getOrCreateClientId() { let { clientId: e } = await chrome.storage.local.get("clientId"); return e || (e = self.crypto.randomUUID(), await chrome.storage.local.set({ clientId: e })), e } async getOrCreateSessionId() { let { sessionData: e } = await chrome.storage.session.get("sessionData"); const t = Date.now(); return e && e.timestamp && ((t - e.timestamp) / 6e4 > 30 ? e = null : (e.timestamp = t, await chrome.storage.session.set({ sessionData: e }))), e || (e = { session_id: t.toString(), timestamp: t.toString() }, await chrome.storage.session.set({ sessionData: e })), e.session_id } async fireEvent(e, t = {}) { t.session_id || (t.session_id = await this.getOrCreateSessionId()), t.engagement_time_msec || (t.engagement_time_msec = 100), this.debug && (t.debug_mode = !0); try { const i = await fetch(`${r}?measurement_id=${c}&api_secret=${l}`, { method: "POST", body: JSON.stringify({ client_id: await this.getOrCreateClientId(), events: [{ name: e, params: t }] }) }); if (!this.debug) return; console.log("Analytics Text:", await i.text()) } catch (i) { console.error("Google Analytics request failed with an exception", i) } } async firePageViewEvent(e, t, i = {}) { return this.fireEvent("page_view", { page_title: e, page_location: t, ...i }) } async fireErrorEvent(e, t = {}) { return this.fireEvent("extension_error", { ...e, ...t }) } } const E = new _(!1); export { E as A };
